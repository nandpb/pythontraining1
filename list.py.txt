#list ex
s = "show how to break in to sequences".split()
print(s)
print(s[4])
print(s[-5])
print(s[1:-1])
print(s[3:])
print(s[:3])
print(s[:])
#copying lists

ex = s[:]
u = s.copy()
print(type(u))
print(type(ex))
print(type(s))
print(ex)

print(u is s )
print(ex is s)
print(ex == s)
print(u == s )

#copy method
u = s.copy()
print(u)

#list constructor to copy

v = list(s)
print(v)

#shallow copies
# a and b are distinct objects

a = [[1,2],[3,4]]
b = a[:]
print( a is b )

print( a == b )

print(a[0])
print(b[0])

print(a[0] is b[0])

#replace the elements

a[0]=[8,9]

print(a[0], b[0])

#append
a[1].append(5)
print(a[1])
print(b[1])

print(a)
print(b)

#list repetition

c=[3,56]

print(c * 4 )

#list repetitions are shallow

s = [[1,-1]] * 5
print(s)

#append integer

s[3].append(7)
print(s)

s="list repetition used for initializing the list of known size with a constant".split()
print(s)

i=s.index('known')
print(i)
print(s[i])
#print(s.index("python"))

#count method

print(s.count('the'))

#membership test in list

print(37 in [1,4,5,67,37,99])

u =" there are several collection elements".split()
print(u)

#delete the particular element
del u[3]
print(u)

u.remove("elements")
print(u)

#inserting items in the list using insert() method

a= "i accidentally the whole universe".split()
print (a)

a.insert(2,'destroyed')
print(a)

print(''.join(a))

#concatenation

k = [2,1,3]
l = [4,6,7]

m= k + l

print(m)

k+=[45,88,78,99]

print(k)

k.extend([76,99,33])
print(k)

#reversing and sorting lists

g = [333,21,66,89]
g.reverse()
print(g)

g.sort()
print(g)

#reversing sort

g.sort(reverse=True)
print(g)

#key argument to sort - ordering the words in the order of length

h='not perplexing do handwriting family where i illegibly know doctors '.split()
h.sort(key=len)

print(h)

#joining the words again

print(' '.join(h))

x= [4,6,7,1]
y=sorted(x)

print(y)
print(x)

#reversed method

p = [78,45,3,2]
q = reversed(p)
print(q)
print(list(q))
print(p)

#list with mixed types
a = [12, "hi" , 34, 55]
print(a)

my_list = ["mouse", [8, 4, 6], ['a']]
print(my_list)

my_list = ['p','r','o','b','e']
# Output: p
print(my_list[0])

# Output: o
print(my_list[2])

# Output: e
print(my_list[4])

# Error! Only integer can be used for indexing
# my_list[4.0]

# Nested List
n_list = ["Happy", [2,0,1,5]]

# Nested indexing

# Output: a
print(n_list[0][1])

# Output: 5
print(n_list[1][3])

#negative indexing

my_list = ['p','r','o','b','e']

# Output: e
print(my_list[-1])

# Output: p
print(my_list[-5])

#slicing

my_list = ['p','r','o','g','r','a','m','e','r']
# elements 3rd to 5th
print(my_list[2:5])

# elements beginning to 4th
print(my_list[:-5])

# elements 6th to end
print(my_list[5:])

# elements beginning to end
print(my_list[:])

#assginment operator

# mistake values
odd = [2, 4, 6, 8]

# change the 1st item
odd[0] = 1

# Output: [1, 4, 6, 8]
print(odd)

# change 2nd to 4th items
odd[1:4] = [3, 5, 7]

# Output: [1, 3, 5, 7]
print(odd)

odd = [1, 3, 5]

odd.append(7)

# Output: [1, 3, 5, 7]
print(odd)

odd.extend([9, 11, 13])

# Output: [1, 3, 5, 7, 9, 11, 13]
print(odd)

#insert method

odd = [1, 9]
odd.insert(1,3)

# Output: [1, 3, 9]
print(odd)

odd[2:2] = [5, 7]

# Output: [1, 3, 5, 7, 9]
print(odd)

#deleting elements

my_list = ['p','r','o','b','l','e','m']

# delete one item
del my_list[2]

# Output: ['p', 'r', 'b', 'l', 'e', 'm']
print(my_list)

# delete multiple items
del my_list[1:5]

# Output: ['p', 'm']
print(my_list)

# delete entire list
del my_list

# Error: List not defined
print(my_list)

#remove method

my_list = ['p','r','o','b','l','e','m']
my_list.remove('p')

# Output: ['r', 'o', 'b', 'l', 'e', 'm']
print(my_list)

# Output: 'o'
print(my_list.pop(1))

# Output: ['r', 'b', 'l', 'e', 'm']
print(my_list)

# Output: 'm'
print(my_list.pop())

# Output: ['r', 'b', 'l', 'e']
print(my_list)

my_list.clear()

# Output: []
print(my_list)

# append() - Add an element to the end of the list,extend() - Add all elements of a list to the another list
#insert() - Insert an item at the defined index
#remove() - Removes an item from the list
#pop() - Removes and returns an element at the given index
#clear() - Removes all items from the list
#index() - Returns the index of the first matched item
#count() - Returns the count of number of items passed as an argument
#sort() - Sort items in a list in ascending order
#reverse() - Reverse the order of items in the list
#copy() - Returns a shallow copy of the list

my_list = [3, 8, 1, 6, 0, 8, 4]

# Output: 1
print(my_list.index(8))

# Output: 2
print(my_list.count(8))

my_list.sort()

# Output: [0, 1, 3, 4, 6, 8, 8]
print(my_list)

my_list.reverse()

# Output: [8, 8, 6, 4, 3, 1, 0]
print(my_list)

#iteration

for fruit in ['apple','banana','mango']:
    print("I like",fruit)

#all()	Return True if all elements of the list are true (or if the list is empty).
#any()	Return True if any element of the list is true. If the list is empty, return False.
#enumerate()	Return an enumerate object. It contains the index and value of all the items of list as a tuple.
#len()	Return the length (the number of items) in the list.
#list()	Convert an iterable (tuple, string, set, dictionary) to a list.
#max()	Return the largest item in the list.
#min()	Return the smallest item in the list
#sorted()	Return a new sorted list (does not sort the list itself).
#sum()	Return the sum of all elements in the list.











